#!/bin/bash

# CUPSの設定ディレクトリを作成
mkdir -p /etc/cups

# CUPSデーモンをバックグラウンドで起動
cupsd &
CUPSD_PID=$!

echo "Waiting for CUPS to be ready..."
# CUPSが起動するまで最大30秒待機
timeout=30
while [ $timeout -gt 0 ]; do
    if ps -p $CUPSD_PID > /dev/null 2>&1; then
        echo "CUPS is ready!"
        break
    fi
    echo "CUPS not ready yet, waiting... ($timeout seconds left)"
    sleep 1
    timeout=$((timeout - 1))
done

if [ $timeout -eq 0 ]; then
    echo "Warning: CUPS startup timeout, continuing anyway..."
fi

# プリンター情報を格納する環境変数
# 例: 'MG6200:192.168.1.113:lpd:gutenprint.5.3://bjc-PIXMA-MG6200/expert,EPSON-PX-G5300:192.168.1.114:ipp:gutenprint.5.3://bjc-EPSON-PX-G5300/expert'
PRINTERS_CONFIG=${PRINTERS_CONFIG:-""}

# 環境変数が空でなければ処理を実行
if [ -n "$PRINTERS_CONFIG" ]; then
    # カンマで区切られた各プリンター設定をループ
    IFS=',' read -ra PRINTER_ARRAY <<< "$PRINTERS_CONFIG"
    for PRINTER_INFO in "${PRINTER_ARRAY[@]}"; do
        # コロンで分割（名前:IP:プロトコル:モデル）
        IFS=':' read -ra INFO_ARRAY <<< "$PRINTER_INFO"
        PRINTER_NAME=${INFO_ARRAY[0]}
        PRINTER_IP=${INFO_ARRAY[1]}
        PRINTER_PROTOCOL=${INFO_ARRAY[2]}
        # 残りの部分をモデルとして結合（モデル名にコロンが含まれる場合に対応）
        PRINTER_MODEL=$(printf "%s:" "${INFO_ARRAY[@]:3}")
        PRINTER_MODEL=${PRINTER_MODEL%:}  # 最後のコロンを削除

        # プリンターの追加と設定
        echo "Adding printer: $PRINTER_NAME with protocol $PRINTER_PROTOCOL at $PRINTER_IP"
        lpadmin -p "$PRINTER_NAME" -E -v "${PRINTER_PROTOCOL}://${PRINTER_IP}/" -m "$PRINTER_MODEL"
    done
else
    echo "No printer configuration found in PRINTERS_CONFIG."
fi

# スキャナー設定のスクリプト
# SCANNERS_CONFIG: "SCANNERS_NAME:SCANNERS_IP,SCANNERS_NAME2:SCANNERS_IP2"
SCANNERS_CONFIG=${SCANNERS_CONFIG:-""}
SCANNERS_CONFIG_FILE="/etc/sane.d/pixma.conf"

if [ -n "$SCANNERS_CONFIG" ]; then
    echo "Writing scanner configuration to $SCANNERS_CONFIG_FILE"

    # ファイルをクリアして、ヘッダーを書き込む
    echo "# This file is automatically generated by the container's startup script." > "$SCANNERS_CONFIG_FILE"
    echo "" >> "$SCANNERS_CONFIG_FILE"

    # カンマで区切られた各スキャナー設定をループ
    IFS=',' read -ra SCANNER_ARRAY <<< "$SCANNERS_CONFIG"
    for SCANNER_INFO in "${SCANNER_ARRAY[@]}"; do
        # 最初のコロンで名前と残りの部分を分割
        SCANNER_NAME=${SCANNER_INFO%%:*}
        SCANNER_IP=${SCANNER_INFO#*:}

        echo "$SCANNER_IP" >> "$SCANNERS_CONFIG_FILE"
        echo "" >> "$SCANNERS_CONFIG_FILE"
    done
else
    echo "No scanner configuration found in SCANNERS_CONFIG."
fi

# シグナルハンドリングを設定してCUPSデーモンも適切に終了させる
trap 'kill $(jobs -p)' EXIT

# メインプロセスとしてnpm run devを実行
exec npm run dev
